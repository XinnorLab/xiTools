---

- name: Build list of xiRAID device paths
  ansible.builtin.set_fact:
    xiraid_device_paths: >-
      {{
        ((xiraid_arrays | map(attribute='devices') | flatten | list) +
        (xiraid_spare_pools | default([]) | map(attribute='devices') | flatten | list))
        | unique | list
      }}
  tags: [raid_fs, raid]

- name: Build list of xiRAID device basenames
  ansible.builtin.set_fact:
    xiraid_device_basenames: "{{ xiraid_device_paths | map('basename') | list }}"
  tags: [raid_fs, raid]

- name: Clean xiRAID drives
  ansible.builtin.command: "xicli drive clean -d {{ item }}"
  loop: "{{ xiraid_device_paths }}"
  changed_when: false
  tags: [raid_fs, raid, cleanup]

- name: Gather existing spare pools
  ansible.builtin.command: xicli pool show -f json
  register: xiraid_pools
  changed_when: false
  failed_when: xiraid_pools.rc != 0
  tags: [raid_fs, raid]

- name: Set fact – parsed pools
  ansible.builtin.set_fact:
    existing_pools: "{{ xiraid_pools.stdout | from_json }}"
  tags: [raid_fs, raid]

- name: Create xiRAID spare pools
  ansible.builtin.command: >-
    xicli pool create -n {{ item.name }} -d {{ item.devices | join(' ') }}
  register: pool_create
  changed_when: pool_create.rc == 0
  failed_when:
    - pool_create.rc != 0
    - pool_create.stderr is not search('already exists')
  loop: "{{ xiraid_spare_pools }}"
  loop_control:
    loop_var: item
  when: item.name not in ((existing_pools | default([], true) | json_query('[].name')) | default([], true))
  tags: [raid_fs, raid]


- name: Gather existing xiRAID arrays (json)
  ansible.builtin.command: xicli raid show -f json
  register: xiraid_list
  changed_when: false
  failed_when: xiraid_list.rc != 0
  tags: [raid_fs, raid]

- name: Set fact – parsed arrays
  ansible.builtin.set_fact:
    existing_arrays: "{{ xiraid_list.stdout | from_json }}"
  tags: [raid_fs, raid]

- name: Create xiRAID arrays that are missing
  ansible.builtin.include_tasks: create_array.yml
  loop: "{{ xiraid_arrays }}"
  loop_control:
    loop_var: item
  # If `xiraid_list.stdout` couldn't be parsed, `existing_arrays` may be `None`.
  # Apply `default([])` before the `json_query` filter to avoid type errors.
  # Pass `true` to `default` so that `None` is treated as undefined.
  when: item.name not in ((existing_arrays | default([], true) | json_query('[].name')) | default([], true))
  tags: [raid_fs, raid]

- name: Attach spare pools to existing arrays
  ansible.builtin.command: >-
    xicli raid modify --name {{ item.name }} -sp {{ item.spare_pool }}
  register: raid_mod
  changed_when: raid_mod.rc == 0
  failed_when:
    - raid_mod.rc != 0
    - raid_mod.stderr is not search('already')
  loop: "{{ xiraid_arrays }}"
  loop_control:
    loop_var: item
  when: item.spare_pool is defined
  tags: [raid_fs, raid]

# ----------------------- Filesystem section -------------------
- name: Ensure XFS utils present
  ansible.builtin.apt:
    name: xfsprogs
    state: present
  tags: [raid_fs, fs]

- name: Create XFS filesystems if absent
  ansible.builtin.include_tasks: create_fs.yml
  loop: "{{ xfs_filesystems }}"
  loop_control:
    loop_var: item
  tags: [raid_fs, fs]
